module Hierclust
  # Clusters a set of Points using Hierarchical Clustering, stopping either
  # when the hierarchy is complete or the clusters are separated by a given
  # minimum distance.
  class Clusterer
    # The Distances for the items being clustered
    attr_reader :distances

    # Create a new Clusterer for the given data.
    # 
    # Specify +separation+ to stop the clustering process once all the
    # items are at least +separation+ units apart.
    # 
    # Specify +resolution+ to give a minimum size for clusters. Points that
    # are within this distance from each other will not be hierarchically
    # clustered, but will be put into clusters based strictly on coordinates.
    # The clusters generated by this "pre-clustering" will then be
    # hierarchically clustered as normal.
    def initialize(data, options = {})
      @separation = options.delete(:separation)
      @resolution = options.delete(:resolution)
      @nils = options.delete(:nils)
      @data = precluster(data)
      @distances = Distances.new(@data, @nils)
    end

    # Calculates and returns the set of clusters.
    def clusters
      return @data if @separation && @distances.separation > @separation
      while @data.length > 1
        @distances = Distances.new(@data, @nils)
        return @data if @separation && @distances.separation > @separation
        @data = find_cluster
      end
      @data
    end

    private
    
    def find_cluster
      case @data.length
      when 0
        []
      when 1, 2
        [Cluster.new(@data)]
      else
        outliers = @distances.outliers
        [@distances.pop_next_cluster, *outliers]
      end
    end
    
    def precluster(points)
      unless @resolution
        # preclustering is only applicable given lower bound on resolution
        return points.dup
      end
      if @separation == 0
        # if no separation is asked for, it's all one cluster
        return [Cluster.new(points)]
      end
      points.inject({}) do |grid_clusters, point|
        grid_coordinates = point.coordinates.map {|coord| ((coord || @nils) / @resolution).floor }
        grid_clusters[grid_coordinates] ||= Cluster.new([])
        grid_clusters[grid_coordinates] << point
        grid_clusters
      end.values
    end
  end
end